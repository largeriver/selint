#!/usr/bin/env python
#
# Written by Filippo Bonazzi
# Copyright (C) 2016 Aalto University
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""TODO: file docstring"""

# Necessary for Python 2/3 compatibility
from __future__ import absolute_import

import os
import os.path
import sys
import argparse
import logging
import imp
import shutil
# Match filenames
import fnmatch

import policysource
import policysource.policy
import plugins


def get_policy_files(config):
    u"""Get a list of policy files given a configuration module with some
    specific variables."""
    # Check the base Android tree directory
    if not hasattr(config, u"BASE_DIR_GLOBAL"):
        # If the config file does not contain the base directory variable
        logging.critical(u"Configuration file is missing BASE_DIR_GLOBAL "
                         u"variable")
        return None
    if not config.BASE_DIR_GLOBAL:
        # If the directory is None or the name is empty
        logging.critical(u"Bad BASE_DIR_GLOBAL variable.")
        return None
    # Expand and sanitize the base Android tree directory name
    FULL_BASE_DIR = os.path.abspath(os.path.expanduser(config.BASE_DIR_GLOBAL))
    # If the directory does not exist or is not traversable/readable
    if (not os.path.isdir(FULL_BASE_DIR)
            or not os.access(FULL_BASE_DIR, os.X_OK | os.R_OK)):
        logging.critical(u"Bad BASE_DIR_GLOBAL value: \"%s\" does not exist "
                         u"or is not readable/traversable!", FULL_BASE_DIR)
        return None
    # Check that we have at least one file/directory
    if not hasattr(config, u"POLICY_DIRS"):
        logging.critical(u"Configuration file is missing POLICY_DIRS "
                         u"variable: no policy directories specified.")
        return None
    # If the POLICY_DIRS variable is empty or contains empty tuples
    if (not config.POLICY_DIRS or not any(x if isinstance(x, str) else x[0]
                                          for x in config.POLICY_DIRS)):
        logging.critical(
            u"Bad POLICY_DIRS value: no policy directories specified.")
        return None
    ###########################################################################
    # Pick up all the files from the supplied directories
    all_files = []
    for x in config.POLICY_DIRS:
        list_recursive = False
        # Check that the directory exists and is readable, traversable
        # Compute the absolute path
        # If this is a simple non-empty string, just use the string
        if isinstance(x, str) and x:
            fp = os.path.abspath(os.path.join(FULL_BASE_DIR, x))
        # If this is a tuple of len=2, made up of a non-empty string and a
        # boolean, use only the string
        elif isinstance(x, tuple) and len(x) == 2 and\
                isinstance(x[0], str) and isinstance(x[1], bool) and x[0]:
            fp = os.path.abspath(os.path.join(FULL_BASE_DIR, x[0]))
            list_recursive = x[1]
        # If the directory does not exist or is not readable/traversable
        if not os.path.isdir(fp) or not os.access(fp, os.X_OK | os.R_OK):
            logging.critical(u"Directory \"%s\" does not exist or is not "
                             u"readable/traversable!", fp)
            # Process the next directory
            continue
        # If a recursive list has been requested, walk the subtree
        if list_recursive:
            # List all directories under fp, and all files under each, get
            # their full name and add them to all_files
            all_files.extend(sorted([os.path.join(dp, f)
                                     for dp, dn, fn in os.walk(fp)
                                     for f in fn]))
        # If no recursive listing has been requested, just list the directory
        else:
            # List all files in the directory, get their full name and add them
            # to all_files
            all_files.extend(sorted([os.path.join(fp, f)
                                     for f in os.listdir(fp)]))
    #######################################################################
    # Get all the supplied filenames
    supplied_files = [x for x in config.POLICY_FILES if x]
    # Filter all_files, keep only files whose name is in supplied_files
    filtered_files = []
    # Iterate over supplied_files to maintain the order in which the filenames
    # have been specified (important)
    for sf in supplied_files:
        for f in all_files:
            # Compute the basename of the file
            bn = os.path.basename(f)
            # If a file matches the supplied filename, and is readable, add it
            if fnmatch.fnmatch(bn, sf) and os.access(f, os.R_OK):
                if f not in filtered_files:
                    filtered_files.append(f)
    # Final sanity check
    if not filtered_files:
        logging.critical(u"No policy files found.")
        return None
    return filtered_files


# Parse arguments
parser = argparse.ArgumentParser(
    description=u"SELinux source policy analysis tool.",
    epilog=u"If not differently specified, all available plugins will be run.")
# List the available plugins
parser.add_argument(u"-l", u"--list", action=u"store_true",
                    help=u"list the available plugins and exit.")
# Select the plugins to run (default: all). Specify either with a whitelist
# or a blacklist, but not both
plugin_group = parser.add_mutually_exclusive_group()
# Plugin whitelist
plugin_group.add_argument(
    u"-w", u"--whitelist", metavar=u"<PLUGIN>",
    choices=plugins.available_plugins, nargs=u"+",
    help=u"specify the plugins to run [Default: run all].")
# Plugin blacklist
plugin_group.add_argument(
    u"-b", u"--blacklist", metavar=u"<PLUGIN>",
    choices=plugins.available_plugins, nargs=u"+",
    help=u"specify the plugins not to run [Default: run all].")
# Get additional M4 definitions
parser.add_argument(u"-D", u"--define", metavar=u"NAME[=VALUE]", nargs=u"+",
                    dest=u"extra_defs",
                    help=u"Pass additional definitions to M4 when expanding "
                    u"the policy. Identical to the -D option in m4.")
# Write out the policy.conf file
parser.add_argument(u"--dumppolicyconf", metavar=u"<FILE>",
                    help=u"write the policy.conf to a user-specified file. "
                    u"If the file already exists, IT WILL BE OVERWRITTEN.")
# Write out the full list of recognized policy files to be processed
parser.add_argument(u"--listpolicyfiles", action=u"store_true",
                    help=u"List all the recognized policy files and exit.")
# Set the verbosity level
parser.add_argument(u"-v", u"--verbosity", metavar=u"<LVL>",
                    choices=[0, 1, 2, 3, 4], type=int, default=-1,
                    help=u"Be verbose. Supported levels are 0-4, "
                    u"with 0 being the default.")
# Supply a different config file
parser.add_argument(u"-c", u"--config", metavar=u"<FILE>", type=str,
                    default=None, help=u"Source the specified config "
                    u"file [Default: config.py].")

args = parser.parse_args()

# Handle "list" option right away
if args.list:
    # List available plugins and exit
    print(u"Available plugins:")
    print(u"\n".join(plugins.available_plugins))
    sys.exit(0)

# Select the desired plugins, either from a whitelist or a blacklist.
# The whitelist has precedence over the blacklist.
# If no restriction is specified, select all available plugins.
if args.whitelist:
    selected_plugins = list(args.whitelist)
elif args.blacklist:
    selected_plugins = [
        x for x in plugins.available_plugins if x not in args.blacklist]
else:
    selected_plugins = list(plugins.available_plugins)
# Find plugins which require neverallow rules.
# Run them on a different policy. This way all plugins which do not require
# neverallow rules can run on a "slim" policy even when running some plugins
# which do require neverallow rules.
plugins_neverallow = []
for each in selected_plugins:
    plg = plugins.get_plugin(each)
    if u"neverallow" in plg.REQUIRED_RULES:
        plugins_neverallow.append(each)

# Import config file as "config"
if args.config is None:
    # If the user didn't specify a configuration file, use the default
    # "config.py" in the software directory
    args.config = os.path.join(os.path.dirname(
        os.path.realpath(__file__)), u"config.py")
    print(u"Using default configuration file \"{}\"...".format(args.config))
else:
    # Use the user-provided configuration file
    print(u"Using configuration file \"{}\"...".format(args.config))
try:
    # Import the configuration file as "config"
    config = imp.load_source(u"config", os.path.abspath(
        os.path.expanduser(args.config)))
except:
    e = sys.exc_info()
    print(e)
    print(u"CRITICAL: Bad configuration file "
          u"\"{}\", aborting ...".format(args.config))
    sys.exit(1)

# Save verbosity in config
if hasattr(config, u"VERBOSITY"):
    # If we have a verbosity configuration value
    if args.verbosity == -1:
        # User didn't explicitly set verbosity on the command line
        if isinstance(config.VERBOSITY, int) and \
                config.VERBOSITY >= 0 and config.VERBOSITY <= 4:
            # If we have a valid verbosity in the config file
            args.verbosity = config.VERBOSITY
    else:
        # User explictly set verbosity on the command line
        config.VERBOSITY = args.verbosity
else:
    # If we have no verbosity configuration value
    if args.verbosity == -1:
        # User didn't explicitly set verbosity on the command line: reset it
        # to the default value
        args.verbosity = 0
    # Set the configuration value of verbosity
    config.VERBOSITY = args.verbosity
# Save extra_defs in config
if hasattr(config, u"EXTRA_DEFS"):
    # If we have an extra_defs configuration value
    if args.extra_defs is None:
        # User didn't explicitly set extra_defs on the command line
        args.extra_defs = config.EXTRA_DEFS
    else:
        # User explictly set extra_defs on the command line: combine the two
        args.extra_defs.extend(config.EXTRA_DEFS)
else:
    # If we have no extra_defs configuration value
    if args.extra_defs is None:
        # User didn't explicitly set extra_defs on the command line: set it
        # to an empty list
        args.extra_defs = []
    # Set the configuration value of extra_defs
    config.EXTRA_DEFS = args.extra_defs

# Setup logging
if args.verbosity == 4:
    logging.basicConfig(level=logging.DEBUG)
elif args.verbosity == 3:
    logging.basicConfig(level=logging.INFO)
elif args.verbosity == 2:
    logging.basicConfig(level=logging.WARNING)
elif args.verbosity == 1:
    logging.basicConfig(level=logging.ERROR)
elif args.verbosity == 0:
    logging.basicConfig(level=logging.CRITICAL)

# Compute list of policy files
# TODO: add CLI option in addition to config file
ALL_POLICY_FILES = get_policy_files(config)
if args.listpolicyfiles:
    print(u"\n".join(ALL_POLICY_FILES))
    sys.exit(0)
# Save the absolute path of the base directory in config
config.FULL_BASE_DIR = os.path.abspath(
    os.path.expanduser(config.BASE_DIR_GLOBAL))

# Create policy
# If neverallow rules are required by some plugin, create a "slim" policy
# and a "fat" policy. Run all plugins which do not require neverallow rules on
# the "slim" policy for speed
policy_slim = policysource.policy.SourcePolicy(
    ALL_POLICY_FILES, args.extra_defs, load_neverallows=False)
if plugins_neverallow:
    policy_fat = policysource.policy.SourcePolicy(
        ALL_POLICY_FILES, args.extra_defs, load_neverallows=True)
else:
    policy_fat = None
# Write the policy.conf to file, if requested
if args.dumppolicyconf:
    try:
        shutil.copyfile(policy.policyconf, args.dumppolicyconf)
    except shutil.Error as e:
        logging.error(u"%s", e)
        logging.error(u"Could not dump policy.conf")
    except IOError as e:
        logging.error(u"%s", e)
        logging.error(u"Could not dump policy.conf")
    else:
        logging.info(u"Wrote policy.conf to %s", args.dumppolicyconf)

# Run plugins
for plg in selected_plugins:
    print(u"Running plugin " + plg + u"...")
    if plg in plugins_neverallow:
        plugins.get_plugin(plg).main(policy_fat, config)
    else:
        plugins.get_plugin(plg).main(policy_slim, config)
